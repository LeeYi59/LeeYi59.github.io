<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker新手入门</title>
    <url>/2020/08/12/Docker%E6%96%B0%E6%89%8B%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>最近需要给多个用户部署项目，为了方便管理不同的环境和数据库，开始了Docker的学习之旅。</p>
<a id="more"></a>

<p>Docker是一个运行应用程序的开放平台，能够将一个或多个程序放在不同的<code>容器</code>中运行，容器环境完全以沙盒方式运行，实现容器环境与主机基础框架隔离。</p>
<p>Docker的引入提高了单一主机环境下部署程序的灵活性和资源的利用率，大大减少了开发时长和开发成本。</p>
<p>Docker的几个基本概念（节选自菜鸟教程）：</p>
<ul>
<li><p><strong>镜像（Image）</strong>：Docker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统。</p>
</li>
<li><p><strong>容器（Container）</strong>：镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p>
</li>
<li><p><strong>仓库（Repository）</strong>：仓库可看成一个代码控制中心，用来保存镜像。</p>
</li>
</ul>
<img data-src="/2020/08/12/Docker%E6%96%B0%E6%89%8B%E5%85%A5%E9%97%A8/576507-docker1.png" class>

<p>接下来为大家分享一些Docker基础入门操作。</p>
<p><strong>首先是在Centos下安装Docker：</strong><a href="/2020/08/12/Centos%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85Docker/" title="Centos系统安装Docker">Centos系统安装Docker</a></p>
<p><strong>Docker的一些常见命令：</strong><a href="/2020/08/13/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/" title="Docker常用命令">Docker常用命令</a></p>
<p>Docker的使用步骤：一般为 <code>获取/建立镜像</code>-&gt;<code>使用镜像创建容器</code>-&gt;<code>运行容器</code></p>
<p>这里以mysql为例：</p>
<p><strong>拉取mysql5.7</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure>

<p><strong>运行mysql，并把root账号密码初始化为123456，将容器中3306端口映射到宿主机的13306端口上</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -itd --name mysql-test -p 13306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7</span><br></pre></td></tr></table></figure>
<p><code>MYSQL_ROOT_PASSWORD</code>:设置密码</p>
<p><strong>查看docker容器运行情况</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>

<p><strong>进入容器：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it 62349aa31687 /bin/bash</span><br></pre></td></tr></table></figure>

<p>在学习了熟练使用docker之后，发现了一个问题。<br>就是每次修改容器配置信息时都要进行容器删除、容器新建，同时附带很多参数，很不方便。<br>如果遇到需要同时修改多个的情况，那就更恐怖了。</p>
<p>这个时候就该使用DockerCompose，统一管理容器。</p>
<p><strong>这是DockerCompose的安装教程：</strong><a href="/2020/08/12/Centos%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85DockerCompose%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/" title="Centos系统安装DockerCompose的两种方法">Centos系统安装DockerCompose的两种方法</a></p>
<p><font style="color:blue">常见问题：</font><br>如果安装完毕后出现拉取镜像失败的情况，可通过配置<code>镜像加速器</code>来加快连接速度。</p>
<p><strong>配置镜像加速：</strong><a href="/2020/08/13/Docker%E9%85%8D%E7%BD%AE%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8/" title="Docker配置镜像加速器">Docker配置镜像加速器</a></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker常用命令</title>
    <url>/2020/08/13/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p><strong>运行一个容器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -i -t ubuntu:15.10 /bin/bash</span><br></pre></td></tr></table></figure>
<p><code>-i</code>：打开伪终端<br><code>-t</code>：允许输入信息交互<br><code>-d</code>：后台运行<br><code>-p</code>：将端口映射到主机上</p>
<a id="more"></a>

<p>如</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 主机端口:容器端口 training/webapp python app.py</span><br></pre></td></tr></table></figure>
<p>将容器内5000端口映射到主机的5000端口<br><code>-P</code> :是容器内部端口随机映射到主机的高端口。<br><code>-p</code> : 是容器内部端口绑定到指定的主机端口。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -v 数据卷名称或者主机路径:容器内路径</span><br></pre></td></tr></table></figure>
<p><code>-v</code>：指定数据卷 ，如果指定路径则会自动创建一个数据卷</p>
<p><code>--name</code>：指定容器名称，如</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -itd --name ubuntu-test ubuntu</span><br></pre></td></tr></table></figure>
<p>将容器名命名为ubuntu-test也可直接输入<code>-itd</code>代替<code>-i</code> <code>-t</code> <code>-d</code></p>
<p><strong>查看运行中的docker容器列表</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>

<p> <code>-a</code>：查看所有状态下的容器<br><code>-l</code>：查看最后一次创建的容器<br><code>-q</code>：只查看容器得到的标识</p>
<p><strong>查看docker容器日志</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker logs 容器id/容器名称</span><br></pre></td></tr></table></figure>
<p>可加<code>-f</code>跟随尾部输出日志</p>
<p><strong>.停止一个docker容器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker stop 容器id/容器名称</span><br></pre></td></tr></table></figure>

<p><strong>开启一个或多个docker容器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker start 容器id/容器名称</span><br></pre></td></tr></table></figure>
<p><strong>重启docker容器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker restart 容器id/容器名称</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>适用于正在运行中的容器</strong></p>
<p><strong>进入docker容器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker attach 容器id/容器名称</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec 容器id/容器名称 </span><br></pre></td></tr></table></figure>
<p>推荐使用<code>docker exec</code>,<br><code>docker attach</code>进入容器后使用<code>exit</code>命令会导致docker容器停止，<code>docker exec</code>则不会</p>
<p><strong>导出本地容器快照文件</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker export 容器id/容器名称 &gt; 输出文件.tar</span><br></pre></td></tr></table></figure>

<p><strong>将快照文件导入到镜像中</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat docker/ubuntu.tar | docker import - test/ubuntu:v1</span><br></pre></td></tr></table></figure>
<p>将docker/ubuntu.tar导入到镜像test/ubuntu:v1中</p>
<p><strong>通过从其他url中导入</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker import http://example.com/exampleimage.tgz example/imagerepo</span><br></pre></td></tr></table></figure>

<p><strong>删除容器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm -f 容器id/容器名称</span><br></pre></td></tr></table></figure>
<p><font color="red">注：删除容器时，容器必须是停止状态，否则会报错</font></p>
<p><strong>清除所有已终结的容器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container prune</span><br></pre></td></tr></table></figure>
<p>如果询问就是选yes</p>
<p><strong>查看容器端口占用</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker port 容器id/容器名称     </span><br></pre></td></tr></table></figure>

<p><strong>查看容器内部进程</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker top 容器id/容器Name</span><br></pre></td></tr></table></figure>

<p><strong>查看容器底层信息</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker inspect 容器id/容器Name</span><br></pre></td></tr></table></figure>

<p><strong>从仓库拉取镜像</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull 镜像名:版本号</span><br></pre></td></tr></table></figure>
<p><strong>删除镜像</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rmi 镜像名</span><br></pre></td></tr></table></figure>

<p><strong>更新镜像</strong></p>
<p>以ubuntu:15.10为例，我们希望得到更新的ubuntu系统先把镜像在容器中运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -t -i ubuntu:15.10 /bin/bash</span><br></pre></td></tr></table></figure>
<p>在容器中执行<code>apt-get update</code>进行系统更新，完成后<code>exit</code>退出容器接着执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker commit -m=&quot;更新&quot; -a=&quot;lee&quot; 容器id runoob/ubuntu:v2</span><br></pre></td></tr></table></figure>
<p>将ubuntu容器提交成为镜像runoob/ubuntu:v2<br><code>-m</code>: 提交的描述信息<br><code>-a</code>: 指定镜像作者</p>
<p><strong>创建镜像</strong><br>需要一个 Dockerfile文件 ，其中包含一组指令来告诉 Docker 如何构建我们的镜像，具体内容这里不详解。使用<code>docker build</code>创建镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -t 镜像名:版本号 .</span><br></pre></td></tr></table></figure>
<p><code>-t</code> ：指定要创建的目标镜像名<br><code>.</code> ：Dockerfile 文件所在目录，可以指定Dockerfile 的绝对路径</p>
<p><strong>复制一个镜像到新的版本镜像</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker tag 镜像id 新镜像名:版本号</span><br></pre></td></tr></table></figure>

<p><strong>保存本地镜像到文件</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker save -o 导出的路径 镜像id</span><br></pre></td></tr></table></figure>

<p><strong>加载本地镜像文件</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker load -i 镜像文件</span><br></pre></td></tr></table></figure>

<p><strong>修改镜像名称</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker tag 镜像id 新镜像名称:版本</span><br></pre></td></tr></table></figure>

<p><strong>创建数据卷</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker volume create 数据卷名称</span><br></pre></td></tr></table></figure>
<p>创建数据卷之后，会默认存放在一个目录下 /var/lib/docker/volumes/数据卷名称/_data</p>
<p><strong>查看全部数据卷</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker volume ls</span><br></pre></td></tr></table></figure>

<p><strong>查看数据卷详细信息</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker volume inspect 数据卷名称</span><br></pre></td></tr></table></figure>

<p><strong>删除数据卷</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker volume rm 数据卷名称</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker配置镜像加速器</title>
    <url>/2020/08/13/Docker%E9%85%8D%E7%BD%AE%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8/</url>
    <content><![CDATA[<p>使用阿里云镜像加速器,加快Docker下载速度</p>
<a id="more"></a>

<p>登录阿里云后台-&gt;搜索容器镜像服务-&gt;点击左下角镜像加速器</p>
<img data-src="/2020/08/13/Docker%E9%85%8D%E7%BD%AE%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8/Image.png" class>

<p>复制加速器地址，在/etc/docker/下创建daemon.json,添加</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123; <span class="attr">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://5nykq2ld.mirror.aliyuncs.com&quot;</span>] &#125;</span><br></pre></td></tr></table></figure>

<p>或者直接复制下方代码，运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line"> &#123; &quot;registry-mirrors&quot;: [&quot;https://5nykq2ld.mirror.aliyuncs.com&quot;] &#125; </span><br><span class="line">EOF </span><br><span class="line">sudo systemctl daemon-reload </span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos系统安装DockerCompose的两种方法</title>
    <url>/2020/08/12/Centos%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85DockerCompose%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>总结两种安装DockerCompose 的方法</p>
<a id="more"></a>

<p><strong>方法1:</strong></p>
<p>从docker的github仓库上下载docker-compose资源，这个方法适用于网络好的或者可以翻出去的人。</p>
<p>拉取docker-compose资源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<p>设置权限，以便可执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<p>设置软链接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br></pre></td></tr></table></figure>

<p>测试结果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure>

<p>显示<code>cker-compose version 1.24.1, build 4667896b</code>则成功</p>
<p><strong>方法2：</strong></p>
<p>使用python-pip安装。这个方法适用于网络不好无法拉取docker-compose资源的人。<br><font style="color:red;">提示：此方法不推荐使用，除非第一种方法实在无法实现。因为安装后会附带大量pip相关依赖，对环境的纯净度会所影响。</font></p>
<p>安装python-pip</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install epel-release</span><br><span class="line">yum -y install python-pip</span><br></pre></td></tr></table></figure>

<p>安装docker-compose</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install docker-compose</span><br></pre></td></tr></table></figure>

<p>待安装完成后，执行查询版本的命令，即可安装docker-compose</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose version</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Centos</tag>
        <tag>DockerCompose</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos系统安装Docker</title>
    <url>/2020/08/12/Centos%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85Docker/</url>
    <content><![CDATA[<p>在Centos系统安装Docker环境</p>
<a id="more"></a>

<p>这里使用的是Centos7系统，<br>首先确保旧版本没有残余。</p>
<p><strong>卸载旧版本</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure>

<p><strong>添加Docker所需依赖</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install -y yum-utils \</span><br><span class="line">  device-mapper-persistent-data \</span><br><span class="line">  lvm2    </span><br></pre></td></tr></table></figure>

<p>原本的yum是没有docker的，所以需要将docker的repo添加到yum的repo仓库中</p>
<p><strong>设置安装仓库</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<p><strong>安装  Docker Engine-Community</strong></p>
<p>查看可下载版本列表</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum list docker-ce --showduplicates | sort -r</span><br></pre></td></tr></table></figure>

<img data-src="/2020/08/12/Centos%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85Docker/Image.png" class title="This is an example image">

<p>安装命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io</span><br></pre></td></tr></table></figure>

<p>选择指定的版本，如19.03.8,替代<VERSION_STRING></VERSION_STRING></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install docker-ce-19.03.8 docker-ce-cli-19.03.8 containerd.io</span><br></pre></td></tr></table></figure>

<p>也可直接使用默认最新版本安装</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">sudo yum install docker-<span class="keyword">ce</span> docker-<span class="keyword">ce</span>-cli containerd.io</span><br></pre></td></tr></table></figure>



<p><strong>启动docker</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure>

<p><strong>运行helloworld确认是否安装成功</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure>

<p><strong>如果启动失败</strong><br>可能性1：selinux值问题<br>解决：执行 <code>vi /etc/sysconfig/selinux</code> , 把 <code>selinux</code> 属性值改为<code>disabled</code>。然后重启系统。</p>
<p>可能性2：没有配置文件<br>解决：修改docker.service</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim  /lib/systemd/system/docker.service  </span><br></pre></td></tr></table></figure>

<p>docker.service内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Docker Application Container Engine</span><br><span class="line">Documentation=https://docs.docker.com</span><br><span class="line">After=network.target docker.socket</span><br><span class="line">Requires=docker.socket</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">EnvironmentFile=/etc/sysconfig/docker</span><br><span class="line">ExecStart=/usr/bin/docker -d $OPTIONS -H fd://</span><br><span class="line">LimitNOFILE=1048576</span><br><span class="line">LimitNPROC=1048576</span><br><span class="line">LimitCORE=infinity</span><br><span class="line">MountFlags=slave</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<p>再修改/etc/sysconfig/docker，不存在则新建</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/docker </span><br></pre></td></tr></table></figure>
<p>docker内容如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> /etc/sysconfig/docker</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Modify these options <span class="keyword">if</span> you want to change the way the docker daemon runs</span></span><br><span class="line">OPTIONS=&#x27;-H tcp://0.0.0.0:4243 -H unix:///var/run/docker.sock&#x27;</span><br><span class="line">DOCKER_CERT_PATH=/etc/docker</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> If you want to add your own registry to be used <span class="keyword">for</span> docker search and docker</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> pull use the ADD_REGISTRY option to list a <span class="built_in">set</span> of registries, each prepended</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> with --add-registry flag. The first registry added will be the first registry</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> searched.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ADD_REGISTRY=<span class="string">&#x27;--add-registry registry.access.redhat.com&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> If you want to block registries from being used, uncomment the BLOCK_REGISTRY</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> option and give it a <span class="built_in">set</span> of registries, each prepended with --block-registry</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> flag. For example adding docker.io will stop users from downloading images</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> from docker.io</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> BLOCK_REGISTRY=<span class="string">&#x27;--block-registry&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> If you have a registry secured with https but <span class="keyword">do</span> not have proper certs</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> distributed, you can tell docker to not look <span class="keyword">for</span> full authorization by</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> adding the registry to the INSECURE_REGISTRY line and uncommenting it.</span></span><br><span class="line"> INSECURE_REGISTRY=&#x27;--insecure-registry dl.dockerpool.com:5000&#x27;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> On an SELinux system, <span class="keyword">if</span> you remove the --selinux-enabled option, you</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> also need to turn on the docker_transition_unconfined boolean.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> setsebool -P docker_transition_unconfined 1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Location used <span class="keyword">for</span> temporary files, such as those created by</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker load and build operations. Default is /var/lib/docker/tmp</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Can be overriden by setting the following environment variable.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> DOCKER_TMPDIR=/var/tmp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Controls the /etc/cron.daily/docker-logrotate cron job status.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> To <span class="built_in">disable</span>, uncomment the line below.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> LOGROTATE=<span class="literal">false</span></span></span><br></pre></td></tr></table></figure>
<p>重启docker</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Docker</category>
        <category>Centos</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Centos</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux禁止休眠</title>
    <url>/2020/08/10/Linux%E7%A6%81%E6%AD%A2%E4%BC%91%E7%9C%A0/</url>
    <content><![CDATA[<p>最近重装了centos7，只用了终端版，并没有使用界面，但还是发现待机一段时间后就会关闭屏幕，断开网络，挣扎了很久。</p>
<a id="more"></a>

<p>最后发现，可以通过修改修改X11的配置来实现禁止自动休眠，配置文件为/etc/X11/xorg.conf</p>
<p><font style="color:red">注：如果原来是没有的，相当于新建了一个，如果原来有这个文件，请做好备份，据说，是据说可能会由于配置错误导致无法进行X11桌面.</font></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/X11/xorg.conf</span><br></pre></td></tr></table></figure>

<p>修改涉及两个地方</p>
<ol>
<li><p>Section “Monitor”：找到Section “Monitor”，查看其配置中是否有 DPMS，且其值为 false，保证配置信息如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Section &quot;Monitor&quot;</span><br><span class="line">    Option &quot;DPMS&quot; &quot;false&quot;</span><br><span class="line">EndSection</span><br></pre></td></tr></table></figure>
</li>
<li><p>新增一个Section “ServerFlags”，包含的内容如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Section &quot;ServerFlags&quot;</span><br><span class="line">    Option      &quot;BlankTime&quot; &quot;0&quot;</span><br><span class="line">    Option      &quot;StandbyTime&quot; &quot;0&quot;</span><br><span class="line">    Option      &quot;SuspendTime&quot; &quot;0&quot;</span><br><span class="line">    Option      &quot;OffTime&quot; &quot;0&quot;</span><br><span class="line">EndSection</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Centos</tag>
        <tag>Linux</tag>
        <tag>命令行</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux用户和用户组操作</title>
    <url>/2020/08/05/Linux%E7%94%A8%E6%88%B7%E5%92%8C%E7%94%A8%E6%88%B7%E7%BB%84%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p><strong>创建用户</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">useradd [-cgd] [选项指定的具体内容] [用户名]</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p><code> -c</code>: 代表comment，给用户添加一段注释</p>
<p><code>-g</code>：代表group，可以修改用户的所在组 </p>
<p><code>-d</code>：代表指定用户的home目录</p>
<p><strong>设置密码</strong> </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">passwd 用户名</span><br></pre></td></tr></table></figure>

<p><strong>切换用户</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su 用户名</span><br></pre></td></tr></table></figure>

<p>切换后自动跳转到该用户的home目录下</p>
<p><code>#</code>代表该用户为超级管理员</p>
<p><code>$</code>代表该用户为普通用户</p>
<p><strong>修改用户</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">usermod [-cgd] [选项指定的具体内容] 用户名</span><br></pre></td></tr></table></figure>

<p><code>-c</code>: 代表comment，给用户添加一段注释</p>
<p><code>-g</code>：代表group，可以修改用户的所在组 </p>
<p><code>-d</code>：代表指定用户的home目录</p>
<p><strong>删除用户</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">userdel [-r] 用户名</span><br></pre></td></tr></table></figure>

<p><code>-r</code>：代表删除用户的同时，删除该用户的home目录</p>
<p><strong>查看用户组成员</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">groups 用户组名</span><br></pre></td></tr></table></figure>

<p><strong>创建用户组</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">groupadd 用户组名</span><br></pre></td></tr></table></figure>

<p><strong>修改用户组</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">groupmond</span> <span class="selector-attr">[-n]</span> <span class="selector-attr">[选项指定的具体内容]</span> 用户组名</span><br></pre></td></tr></table></figure>

<p><code>-n</code>：修改用户组名称</p>
<p><strong>删除用户组</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">groupdel 用户组名</span><br></pre></td></tr></table></figure>

<p>只能删除不存在用户的用户组</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux修改SSH默认端口</title>
    <url>/2020/08/05/Linux%E4%BF%AE%E6%94%B9SSH%E9%BB%98%E8%AE%A4%E7%AB%AF%E5%8F%A3/</url>
    <content><![CDATA[<p>找到/etc/ssh 目录，修改sshd_config文件</p>
<a id="more"></a>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>

<p>找到<code>post</code>,修改成指定端口</p>
<p><font color="#A52A2A" size="4">注：修改前确认端口没有被占用</font></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux修改文件权限</title>
    <url>/2020/08/05/Linux%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90/</url>
    <content><![CDATA[<p><strong>文件权限修改常用两种方式</strong></p>
<a id="more"></a>

<ol>
<li><p>数字模式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod [-R] 777 [文件/目录]</span><br></pre></td></tr></table></figure>

<p>777代表拥有所有权限</p>
<p>从左往右数，每一位分别代表所有者权限，同组用户权限，其他用户权限</p>
<p>读写执(rwx)在这三个权限中 r：4 ，w：2，x：1,</p>
<p>全部权限=读+写+执行=4+2+1=7</p>
<p><code>-R</code>（可选）:当修改一个目录时，同时修改目录下所有文件权限</p>
</li>
<li><p>符号模式，使用符号拼接来赋予权限</p>
<p>用户类型  所有者user：u，同组用户group：g，其他用户other：0，所有用户all：a</p>
<p>操作权限  读read：r，写write：w，执行execute：x</p>
<p>赋予权限的方式  添加：+，减掉：-，设定：=</p>
<p>例如：设定所有用户对aaa.txt拥有的读写权限，因为所有用户是a，读是r，写是w，设定是=，所有执行语句</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod -R a=rw aaa.txt</span><br></pre></td></tr></table></figure>

<p>即可完成赋权操作。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>文件</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统常用命令</title>
    <url>/2020/08/05/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>在我使用linux过程中，shell命令之多令人震惊，此文用以记录经常使用的那些命令。（持续更新）</p>
<a id="more"></a>

<h2 id="系统常用命令"><a href="#系统常用命令" class="headerlink" title="## 系统常用命令"></a>## 系统常用命令</h2><p><strong>查看cpu使用情况</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">top -bn 1 -i -c</span><br></pre></td></tr></table></figure>

<p><strong>查看系统版本</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /proc/version</span><br></pre></td></tr></table></figure>

<p><strong>查看进程</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -ef</span><br></pre></td></tr></table></figure>

<p><strong>查看运行中的进程</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -ef | grep [搜索的内容]</span><br></pre></td></tr></table></figure>

<p><strong>检查服务运行状态</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service [服务名] status</span><br></pre></td></tr></table></figure>

<p><strong>查看服务状态</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start|stop|restart|enable|disable|status [服务名]</span><br></pre></td></tr></table></figure>

<p>分别对应 启动，停止，重启，开机自动启动，禁止开机自动启动</p>
<p><strong>查看端口占用情况</strong></p>
<p>有些系统需要先下载<code>net-tools</code>,这里使用<code>yum</code>安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install net-tools</span><br></pre></td></tr></table></figure>

<p>查看具体端口号,加<code>|grep</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -lnp|grep [端口号]</span><br></pre></td></tr></table></figure>

<p><strong>需要端口情况具体情况</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -naop | grep [端口号]</span><br></pre></td></tr></table></figure>

<p><strong>下载</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl [文件远程地址]</span><br></pre></td></tr></table></figure>

<p><strong>查看文件</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find [路径] -type -f | grep [文件名]</span><br></pre></td></tr></table></figure>

<p><code>-type</code>：表示按类型查找</p>
<p>-<code>f</code>：类型为文件</p>
<p><code>grep</code>：指定搜索文件</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>命令行</tag>
      </tags>
  </entry>
</search>
